{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["import { App, Editor, ItemView, MarkdownView, Notice, Plugin, TFile, WorkspaceLeaf, requestUrl } from 'obsidian';\n\ndeclare global {\n  interface Window {\n    jsMind?: any;\n  }\n}\n\nconst VIEW_TYPE_MINDMAP = 'obsidian-jsmind-mindmap-view';\n\ntype HeadingNode = {\n  id: string;\n  level: number;\n  title: string;\n  start: number;\n  end: number;\n  lineStart: number;\n  headingTextEnd: number;\n  parentId: string | null;\n  children: HeadingNode[];\n  style: 'atx' | 'setext';\n};\n\nfunction computeHeadingSections(markdownText: string): HeadingNode[] {\n  const lines = markdownText.split(/\\n/);\n  const headingRegex = /^(#{1,6})\\s+(.*)$/;\n  const headingsTemp: Array<Omit<HeadingNode, 'end' | 'headingTextEnd' | 'children' | 'parentId'> & { raw: string; style: 'atx' | 'setext' }> = [];\n  let offset = 0;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    const match = line.match(headingRegex);\n    if (match) {\n      const hashes = match[1];\n      const title = match[2].trim();\n      const start = offset;\n      const headingTextEnd = start + line.length; // end of heading line\n      headingsTemp.push({\n        id: `h_${i}_${start}`,\n        level: hashes.length,\n        title,\n        start,\n        lineStart: i,\n        raw: line,\n        style: 'atx',\n      });\n    } else if (i + 1 < lines.length) {\n      const next = lines[i + 1];\n      if (/^=+\\s*$/.test(next)) {\n        const start = offset;\n        const title = line.trim();\n        const headingTextEnd = start + line.length; // only first line text\n        headingsTemp.push({\n          id: `h_${i}_${start}`,\n          level: 1,\n          title,\n          start,\n          lineStart: i,\n          raw: line + '\\n' + next,\n          style: 'setext',\n        });\n      } else if (/^-+\\s*$/.test(next)) {\n        const start = offset;\n        const title = line.trim();\n        const headingTextEnd = start + line.length;\n        headingsTemp.push({\n          id: `h_${i}_${start}`,\n          level: 2,\n          title,\n          start,\n          lineStart: i,\n          raw: line + '\\n' + next,\n          style: 'setext',\n        });\n      }\n    }\n    offset += line.length + 1; // +1 for split removed newline\n  }\n  const headings: HeadingNode[] = headingsTemp.map((h, idx) => ({\n    id: h.id,\n    level: h.level,\n    title: h.title,\n    start: h.start,\n    end: markdownText.length,\n    lineStart: h.lineStart,\n    headingTextEnd: h.start + (lines[h.lineStart]?.length ?? 0),\n    parentId: null,\n    children: [],\n    style: h.style,\n  }));\n  for (let i = 0; i < headings.length; i++) {\n    for (let j = i + 1; j < headings.length; j++) {\n      if (headings[j].level <= headings[i].level) {\n        headings[i].end = headings[j].start - 1; // up to the char before next heading\n        break;\n      }\n    }\n  }\n  const stack: HeadingNode[] = [];\n  for (const h of headings) {\n    while (stack.length > 0 && stack[stack.length - 1].level >= h.level) {\n      stack.pop();\n    }\n    h.parentId = stack.length ? stack[stack.length - 1].id : null;\n    if (stack.length) {\n      stack[stack.length - 1].children.push(h);\n    }\n    stack.push(h);\n  }\n  return headings;\n}\n\nfunction buildJsMindTreeFromHeadings(headings: HeadingNode[], fileName: string) {\n  const firstH1 = headings.find(h => h.level === 1);\n  let rootId: string;\n  let rootTopic: string;\n  if (firstH1) {\n    rootId = firstH1.id;\n    rootTopic = firstH1.title || fileName;\n  } else {\n    rootId = `virtual_root_${fileName}`;\n    rootTopic = fileName.replace(/\\.md$/i, '');\n  }\n  const byId = new Map<string, any>();\n  const root: any = { id: rootId, topic: rootTopic, children: [] };\n  byId.set(rootId, root);\n  for (const h of headings) {\n    if (firstH1 && h.id === firstH1.id) continue;\n    const node: any = { id: h.id, topic: h.title, children: [] };\n    byId.set(h.id, node);\n  }\n  for (const h of headings) {\n    if (firstH1 && h.id === firstH1.id) continue;\n    const parentKey = h.parentId ?? (firstH1 ? firstH1.id : rootId);\n    const parent = byId.get(parentKey) ?? root;\n    parent.children.push(byId.get(h.id));\n  }\n  return { meta: { name: fileName }, format: 'node_tree', data: root };\n}\n\nclass MindmapView extends ItemView {\n  private plugin: MindmapPlugin;\n  private file: TFile | null = null;\n  private containerElDiv: HTMLDivElement | null = null;\n  private jm: any | null = null;\n  private headingsCache: HeadingNode[] = [];\n  private suppressSync: boolean = false;\n  private lastSyncedNodeId: string | null = null;\n  private editorSyncIntervalId: number | null = null;\n  private suppressEditorSyncUntil: number = 0;\n  private prevViewport: { nodesTransform: string | null; canvasTransform: string | null } | null = null;\n  private allowCenterRoot: boolean = false;\n  private centerRootWrapped: boolean = false;\n\n  constructor(leaf: WorkspaceLeaf, plugin: MindmapPlugin) {\n    super(leaf);\n    this.plugin = plugin;\n  }\n\n  getViewType(): string {\n    return VIEW_TYPE_MINDMAP;\n  }\n\n  getDisplayText(): string {\n    return 'Mindmap Preview';\n  }\n\n  async onOpen() {\n    this.contentEl.empty();\n    // Ensure the view takes available height for canvas/SVG rendering\n    this.contentEl.style.display = 'flex';\n    this.contentEl.style.flexDirection = 'column';\n    this.contentEl.style.height = '100%';\n    ;(this.containerEl as HTMLElement).style.height = '100%';\n    const toolbar = this.contentEl.createDiv({ cls: 'mm-toolbar' });\n    const addChildBtn = toolbar.createEl('button', { text: 'Add Child' });\n    const renameBtn = toolbar.createEl('button', { text: 'Rename' });\n    const deleteBtn = toolbar.createEl('button', { text: 'Delete' });\n    const refreshBtn = toolbar.createEl('button', { text: 'Refresh' });\n\n    const container = this.contentEl.createDiv();\n    container.id = 'jsmind_container';\n    container.style.width = '100%';\n    container.style.flex = '1 1 auto';\n    container.style.height = '100%';\n    container.style.minHeight = '400px';\n    this.containerElDiv = container;\n\n    addChildBtn.addEventListener('click', () => this.handleAddChild());\n    renameBtn.addEventListener('click', () => this.handleRename());\n    deleteBtn.addEventListener('click', () => this.handleDelete());\n    refreshBtn.addEventListener('click', () => this.refresh());\n\n    try {\n      await this.ensureJsMindLoaded();\n    } catch (e) {\n      new Notice('Failed to load jsMind. Check network/CSP. Retrying with fallback...');\n      // Try fallback once more\n      try {\n        await this.ensureJsMindLoaded(true);\n      } catch (err) {\n        new Notice('jsMind could not be loaded. Mindmap disabled.');\n        return;\n      }\n    }\n    await this.refresh();\n\n    // Observe size changes for reliable canvas resizing\n    try {\n      const ro = new ResizeObserver(() => {\n        if (this.jm) {\n          try { this.jm.resize && this.jm.resize(); } catch {}\n        }\n      });\n      if (this.containerElDiv) ro.observe(this.containerElDiv);\n      this.register(() => ro.disconnect());\n    } catch {}\n\n    // Attach editor -> mindmap selection sync\n    this.attachEditorSync();\n\n    this.registerEvent(this.app.vault.on('modify', async (file) => {\n      if (this.file && file.path === this.file.path) {\n        await this.softSyncFromDisk();\n      }\n    }));\n\n    // Follow markdown file changes (any leaf switching to a markdown file)\n    this.registerEvent(this.app.workspace.on('file-open', async (file) => {\n      if (!file) return;\n      try {\n        // Only react to markdown files and only if different from current\n        // @ts-ignore\n        const ext = (file as any).extension || (file.name?.split('.').pop() ?? '');\n        if (ext.toLowerCase() === 'md' && file.path !== this.file?.path) {\n          await this.setFile(file);\n        }\n      } catch {}\n    }));\n\n    // Also follow active leaf change to catch focus changes between panes\n    this.registerEvent(this.app.workspace.on('active-leaf-change', async (leaf) => {\n      try {\n        const mv = leaf?.view as MarkdownView | undefined;\n        if (mv?.file) {\n          // @ts-ignore\n          const ext = (mv.file as any).extension || (mv.file.name?.split('.').pop() ?? '');\n          if (ext.toLowerCase() === 'md' && mv.file.path !== this.file?.path) {\n            await this.setFile(mv.file);\n          }\n        }\n      } catch {}\n    }));\n  }\n\n  async setFile(file: TFile) {\n    this.file = file;\n    this.lastSyncedNodeId = null;\n    if (this.containerElDiv) await this.refresh();\n  }\n\n  async onClose() {\n    this.jm = null;\n    this.containerElDiv = null;\n  }\n\n  private async ensureJsMindLoaded(useFallback: boolean = false): Promise<void> {\n    if (window.jsMind) return;\n    const pluginBase = `${this.app.vault.configDir}/plugins/obsidian-mindmap-jsmind`;\n    const localCssVaultPath = `${pluginBase}/vendor/jsmind/style/jsmind.css`;\n    const localJsVaultPath = `${pluginBase}/vendor/jsmind/es6/jsmind.js`;\n    const localCssUrl = this.app.vault.adapter.getResourcePath(localCssVaultPath);\n    const localJsUrl = this.app.vault.adapter.getResourcePath(localJsVaultPath);\n\n    const cssId = 'jsmind-css';\n    if (!document.getElementById(cssId)) {\n      const link = document.createElement('link');\n      link.id = cssId;\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = localCssUrl;\n      document.head.appendChild(link);\n    }\n\n    // Attempt to inline the FULL official jsMind CSS for complete styling (prefer local)\n    const fullCssId = 'jsmind-css-inline-full';\n    if (!document.getElementById(fullCssId)) {\n      const cssSources = [\n        this.app.vault.adapter.getResourcePath(localCssVaultPath),\n      ];\n      for (const cssUrl of cssSources) {\n        try {\n          const res = await fetch(cssUrl);\n          const text = await res.text();\n          if (text && text.length > 1000) {\n            const style = document.createElement('style');\n            style.id = fullCssId;\n            style.textContent = text;\n            document.head.appendChild(style);\n            break;\n          }\n        } catch {}\n      }\n    }\n\n    const tryInject = (url: string) => new Promise<void>((resolve, reject) => {\n      const scriptId = `jsmind-js-${btoa(url).replace(/=/g, '')}`;\n      if (document.getElementById(scriptId)) {\n        resolve();\n        return;\n      }\n      const script = document.createElement('script');\n      script.id = scriptId;\n      script.src = url;\n      script.async = true;\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load ' + url));\n      document.head.appendChild(script);\n    });\n\n    // Prefer local vendored JS\n    const localSrc = localJsUrl;\n    try {\n      await tryInject(localSrc);\n      if (window.jsMind) return;\n    } catch {}\n\n    // Last-resort: try reading local JS text and eval if inject failed\n    try {\n      const jsRes = await fetch(localJsUrl);\n      const jsText = await jsRes.text();\n      const script = document.createElement('script');\n      script.text = jsText;\n      document.head.appendChild(script);\n      if (window.jsMind) return;\n    } catch {}\n    throw new Error('Unable to load jsMind');\n  }\n\n  private async refresh() {\n    if (!this.file) {\n      const active = this.app.workspace.getActiveFile();\n      if (!active) return;\n      this.file = active;\n    }\n    // Capture viewport (transform) and selection before rebuild\n    const prevSelectedId = (() => {\n      try { return this.jm?.get_selected_node?.()?.id ?? null; } catch { return null; }\n    })();\n    this.prevViewport = this.captureViewport();\n\n    const content = await this.app.vault.read(this.file);\n    this.headingsCache = computeHeadingSections(content);\n    const mind = buildJsMindTreeFromHeadings(this.headingsCache, this.file.name);\n    if (!this.containerElDiv || !window.jsMind) return;\n    this.containerElDiv.empty();\n    this.containerElDiv.id = 'jsmind_container';\n    const options = { container: 'jsmind_container', theme: 'primary', editable: true };\n    // Ensure root node style matches themed nodes instead of white\n    try {\n      const overrideId = 'jsmind-theme-override';\n      if (!document.getElementById(overrideId)) {\n        const style = document.createElement('style');\n        style.id = overrideId;\n        style.textContent = `\n/* Make root node adopt theme colors instead of white */\n.theme-primary jmnode.root { background: #e8f2ff !important; border-color: #90c2ff !important; color: #0b3d91 !important; }\n`;\n        document.head.appendChild(style);\n      }\n    } catch {}\n    this.jm = new window.jsMind(options);\n    // Wrap center_root so plugin can decide whether to allow auto-centering root\n    this.wrapCenterRootIfNeeded();\n    // By default,\u7981\u6B62\u5C45\u4E2D\u6839\u8282\u70B9\uFF08\u4F8B\u5982\u9996\u6B21 show \u6216 refresh \u65F6\uFF09\n    this.allowCenterRoot = false;\n    this.jm.show(mind);\n    // Restore previous viewport transform and reselect without centering\n    this.restoreViewport(this.prevViewport);\n    if (prevSelectedId) {\n      try {\n        this.suppressSync = true;\n        this.jm.select_node(prevSelectedId);\n      } finally {\n        setTimeout(() => { this.suppressSync = false; }, 0);\n      }\n    }\n    try { this.jm.expand_all && this.jm.expand_all(); } catch {}\n    try { this.jm.resize && this.jm.resize(); } catch {}\n\n    // Sync: click/select a node -> reveal and select heading in markdown editor\n    try {\n      const attachSelectionSync = () => {\n        if (this.jm && typeof this.jm.add_event_listener === 'function') {\n          this.jm.add_event_listener((type: string, data: any) => {\n            if (type === 'select_node' && data?.node?.id) {\n              if (this.suppressSync) return;\n              // Manual click: only reveal editor, do NOT auto-center mindmap\n              this.lastSyncedNodeId = data.node.id;\n              this.suppressEditorSyncUntil = Date.now() + 600;\n              this.revealHeadingById(data.node.id);\n            }\n          });\n        }\n        if (this.containerElDiv) {\n          const nodesContainer = this.containerElDiv.querySelector('jmnodes') || this.containerElDiv;\n          const handler = (ev: Event) => {\n            const t = ev.target as HTMLElement;\n            const nodeEl = t && (t.closest ? t.closest('jmnode') : null);\n            const nodeId = nodeEl?.getAttribute('nodeid') || '';\n            if (nodeId) {\n              this.lastSyncedNodeId = nodeId;\n              this.suppressEditorSyncUntil = Date.now() + 600;\n              this.revealHeadingById(nodeId);\n            }\n          };\n          nodesContainer.addEventListener('click', handler);\n          this.register(() => nodesContainer && nodesContainer.removeEventListener('click', handler));\n        }\n      };\n      attachSelectionSync();\n    } catch {}\n  }\n\n  private async softSyncFromDisk() {\n    if (!this.file || !this.jm) {\n      await this.refresh();\n      return;\n    }\n    try {\n      const content = await this.app.vault.read(this.file);\n      const nextHeadings = computeHeadingSections(content);\n      await this.applyHeadingsDiff(this.headingsCache, nextHeadings);\n      this.headingsCache = nextHeadings;\n    } catch {\n      await this.refresh();\n    }\n  }\n\n  private async applyHeadingsDiff(prev: HeadingNode[], next: HeadingNode[]) {\n    if (!this.jm) return;\n    const prevMap = new Map(prev.map(h => [h.id, h] as const));\n    const nextMap = new Map(next.map(h => [h.id, h] as const));\n\n    // Determine root id used by current jm\n    const firstPrevH1 = prev.find(h => h.level === 1) ?? null;\n    const firstNextH1 = next.find(h => h.level === 1) ?? null;\n    const rootId = firstPrevH1 ? firstPrevH1.id : `virtual_root_${this.file?.name}`;\n\n    // Remove nodes that no longer exist\n    for (const oldH of prev) {\n      if (!nextMap.has(oldH.id)) {\n        try { this.jm.remove_node(oldH.id); } catch {}\n      }\n    }\n\n    // Add or update nodes\n    for (const newH of next) {\n      const existed = prevMap.get(newH.id);\n      if (!existed) {\n        // add under its computed parent\n        const parentKey = newH.parentId ?? (firstNextH1 ? firstNextH1.id : rootId);\n        try { this.jm.add_node(parentKey, newH.id, newH.title || ''); } catch {}\n        continue;\n      }\n      // update title if changed\n      if (existed.title !== newH.title) {\n        try { this.jm.update_node(newH.id, newH.title || ''); } catch {}\n      }\n      // reparent if parent changed\n      const oldParent = existed.parentId ?? (firstPrevH1 ? firstPrevH1.id : rootId);\n      const newParent = newH.parentId ?? (firstNextH1 ? firstNextH1.id : rootId);\n      if (oldParent !== newParent) {\n        try {\n          this.jm.remove_node(newH.id);\n          this.jm.add_node(newParent, newH.id, newH.title || '');\n        } catch {}\n      }\n    }\n\n    // Reselect previously selected node without centering\n    try {\n      const sel = this.jm.get_selected_node?.();\n      const selId = sel?.id;\n      if (selId && nextMap.has(selId)) {\n        this.suppressSync = true;\n        try { this.jm.select_node(selId); } finally { setTimeout(() => { this.suppressSync = false; }, 0); }\n      }\n    } catch {}\n  }\n\n  private wrapCenterRootIfNeeded() {\n    try {\n      if (this.centerRootWrapped || !this.jm?.view) return;\n      const view: any = this.jm.view;\n      const originalCenterRoot = view.center_root?.bind(view);\n      const originalCenterNode = view.center_node?.bind(view);\n      if (!originalCenterRoot || !originalCenterNode) return;\n      const self = this;\n      view.center_root = function (...args: any[]) {\n        if (self.allowCenterRoot) {\n          try { return originalCenterRoot(...args); } catch {}\n        }\n        // otherwise no-op to preserve current viewport\n        return undefined;\n      };\n      view.center_node = function (node: any, ...rest: any[]) {\n        try {\n          const root = self.jm?.get_root?.();\n          const isRoot = root && node && node.id === root.id;\n          if (isRoot && !self.allowCenterRoot) {\n            return undefined;\n          }\n          return originalCenterNode(node, ...rest);\n        } catch {}\n        return undefined;\n      };\n      this.centerRootWrapped = true;\n    } catch {}\n  }\n\n  private captureViewport(): { nodesTransform: string | null; canvasTransform: string | null } | null {\n    try {\n      if (!this.containerElDiv) return null;\n      const nodes = this.containerElDiv.querySelector('jmnodes') as HTMLElement | null;\n      const canvas = this.containerElDiv.querySelector('canvas.jsmind') as HTMLElement | null;\n      const nodesTransform = nodes ? getComputedStyle(nodes).transform : null;\n      const canvasTransform = canvas ? getComputedStyle(canvas).transform : null;\n      return { nodesTransform, canvasTransform };\n    } catch {\n      return null;\n    }\n  }\n\n  private restoreViewport(prev: { nodesTransform: string | null; canvasTransform: string | null } | null) {\n    try {\n      if (!prev || !this.containerElDiv) return;\n      const nodes = this.containerElDiv.querySelector('jmnodes') as HTMLElement | null;\n      const canvas = this.containerElDiv.querySelector('canvas.jsmind') as HTMLElement | null;\n      if (nodes && prev.nodesTransform && prev.nodesTransform !== 'none') {\n        (nodes.style as any).transform = prev.nodesTransform;\n      }\n      if (canvas && prev.canvasTransform && prev.canvasTransform !== 'none') {\n        (canvas.style as any).transform = prev.canvasTransform as string;\n      }\n    } catch {}\n  }\n\n  private async revealHeadingById(nodeId: string) {\n    if (!this.file) return;\n    try {\n      const content = await this.app.vault.read(this.file);\n      const headings = computeHeadingSections(content);\n      const target = headings.find(h => h.id === nodeId);\n      if (!target) return;\n      const lines = content.split('\\n');\n      const lineText = lines[target.lineStart] ?? '';\n      let chStart = 0;\n      if (target.style === 'atx') {\n        const m = lineText.match(/^(#{1,6})\\s+/);\n        chStart = m ? m[0].length : 0;\n      } else {\n        chStart = 0;\n      }\n      const chEnd = lineText.length;\n\n      // Prefer active markdown view if it matches the file\n      const activeMd = this.app.workspace.getActiveViewOfType(MarkdownView);\n      const from = { line: target.lineStart, ch: chStart } as any;\n      const to = { line: target.lineStart, ch: chEnd } as any;\n      if (activeMd?.file?.path === this.file.path) {\n        const editor = activeMd.editor;\n        try { this.app.workspace.revealLeaf(activeMd.leaf); } catch {}\n        try { (editor as any).focus?.(); } catch {}\n        try { editor.setSelection(from, to); } catch {}\n        try { (editor as any).scrollIntoView({ from, to }, true); } catch {}\n        return;\n      }\n      // Otherwise, find the leaf that has this file\n      const mdLeaves = this.app.workspace.getLeavesOfType('markdown');\n      for (const leaf of mdLeaves) {\n        const v = leaf.view as any;\n        if (v?.file?.path === this.file.path) {\n          const mdView = v as MarkdownView;\n          const editor = mdView.editor;\n          try { this.app.workspace.setActiveLeaf(leaf, { focus: true }); } catch {}\n          try { this.app.workspace.revealLeaf(leaf); } catch {}\n          try { (editor as any).focus?.(); } catch {}\n          try { editor.setSelection(from, to); } catch {}\n          try { (editor as any).scrollIntoView({ from, to }, true); } catch {}\n          return;\n        }\n      }\n    } catch {}\n  }\n\n  private selectMindmapNodeById(nodeId: string, center: boolean) {\n    if (!this.jm) return;\n    try {\n      const node = this.jm.get_node ? this.jm.get_node(nodeId) : null;\n      this.suppressSync = true;\n      try {\n        if (this.jm.select_node) this.jm.select_node(nodeId);\n        if (center && node) {\n          // Defer centering until selection/layout settles\n          this.allowCenterRoot = true;\n          window.setTimeout(() => {\n            try { this.jm.center_node && this.jm.center_node(node); } catch {}\n            try { this.jm.view && this.jm.view.center_node && this.jm.view.center_node(node); } catch {}\n            try { this.jm.resize && this.jm.resize(); } catch {}\n            // reset permission to avoid unintended future root centering\n            this.allowCenterRoot = false;\n          }, 30);\n        }\n      } finally {\n        setTimeout(() => { this.suppressSync = false; }, 0);\n      }\n    } catch {}\n  }\n\n  private attachEditorSync() {\n    const trySync = async () => {\n      if (!this.file) return;\n      if (Date.now() < this.suppressEditorSyncUntil) return;\n      const activeMd = this.app.workspace.getActiveViewOfType(MarkdownView);\n      if (!activeMd || activeMd.file?.path !== this.file.path) return;\n      const editor = activeMd.editor;\n      const cursor = editor.getCursor();\n      const content = editor.getValue();\n      const headings = computeHeadingSections(content);\n      if (headings.length === 0) return;\n      const currentLine = cursor.line;\n      let current: HeadingNode | null = null;\n      for (let i = 0; i < headings.length; i++) {\n        const h = headings[i];\n        const next = headings[i + 1];\n        const endLine = next ? next.lineStart - 1 : content.split('\\n').length - 1;\n        if (currentLine >= h.lineStart && currentLine <= endLine) {\n          current = h;\n        }\n      }\n      if (current && current.id !== this.lastSyncedNodeId) {\n        this.lastSyncedNodeId = current.id;\n        const center = this.isMarkdownEditorFocused(activeMd);\n        this.selectMindmapNodeById(current.id, center);\n      }\n    };\n\n    // Editor content change -> sync\n    this.registerEvent(this.app.workspace.on('editor-change', (editor: Editor, mdView?: MarkdownView) => {\n      if (!this.file) return;\n      if (mdView?.file?.path === this.file.path) {\n        trySync();\n      }\n    }));\n\n    // Poll cursor movement (covers pure cursor move without change)\n    const id = window.setInterval(() => { trySync(); }, 400);\n    this.editorSyncIntervalId = id as unknown as number;\n    this.registerInterval(id as unknown as number);\n  }\n\n  private getSelectedHeading(): HeadingNode | null {\n    if (!this.jm) return null;\n    const node = this.jm.get_selected_node();\n    if (!node) return null;\n    const id = node.id as string;\n    return this.headingsCache.find(h => h.id === id) ?? null;\n  }\n\n  private isMarkdownEditorFocused(mdView: MarkdownView): boolean {\n    try {\n      const active = document.activeElement as HTMLElement | null;\n      if (!active) return false;\n      const cmEl = (mdView as any).contentEl?.querySelector?.('.cm-editor');\n      if (!cmEl) return false;\n      return !!(active === cmEl || active.closest?.('.cm-editor') === cmEl);\n    } catch {}\n    return false;\n  }\n\n  private async handleAddChild() {\n    if (!this.file) return;\n    const selected = this.getSelectedHeading();\n    const content = await this.app.vault.read(this.file);\n    const headings = computeHeadingSections(content);\n    let parent: HeadingNode | null = selected;\n    if (!parent) {\n      const firstH1 = headings.find(h => h.level === 1) ?? null;\n      parent = firstH1;\n    }\n    let levelToInsert = 1;\n    let insertPos = content.length;\n    if (parent) {\n      levelToInsert = Math.min(parent.level + 1, 6);\n      insertPos = parent.end + 1;\n    }\n    const title = window.prompt('New node title');\n    if (!title) return;\n    const headingPrefix = '#'.repeat(levelToInsert);\n    const prefix = content.endsWith('\\n') ? '' : '\\n';\n    const insertText = `${prefix}${headingPrefix} ${title}\\n`;\n    const updated = content.slice(0, insertPos) + insertText + content.slice(insertPos);\n    await this.app.vault.modify(this.file, updated);\n    new Notice('Child node added');\n  }\n\n  private async handleRename() {\n    if (!this.file) return;\n    const selected = this.getSelectedHeading();\n    if (!selected) {\n      new Notice('Select a node to rename');\n      return;\n    }\n    const content = await this.app.vault.read(this.file);\n    const headings = computeHeadingSections(content);\n    const target = headings.find(h => h.id === selected.id);\n    if (!target) return;\n    const newTitle = window.prompt('New title', target.title);\n    if (!newTitle) return;\n    const headingLine = content.substring(target.start, target.headingTextEnd);\n    const replacedLine = headingLine.replace(/^(#{1,6})\\s+.*$/, `$1 ${newTitle}`);\n    const updated = content.slice(0, target.start) + replacedLine + content.slice(target.headingTextEnd);\n    await this.app.vault.modify(this.file, updated);\n    new Notice('Node renamed');\n  }\n\n  private async handleDelete() {\n    if (!this.file) return;\n    const selected = this.getSelectedHeading();\n    if (!selected) {\n      new Notice('Select a node to delete');\n      return;\n    }\n    if (!confirm('Delete this node and its content?')) return;\n    const content = await this.app.vault.read(this.file);\n    const headings = computeHeadingSections(content);\n    const target = headings.find(h => h.id === selected.id);\n    if (!target) return;\n    const start = target.start;\n    const end = Math.min(target.end + 1, content.length);\n    const updated = content.slice(0, start) + content.slice(end);\n    await this.app.vault.modify(this.file, updated);\n    new Notice('Node deleted');\n  }\n}\n\nexport default class MindmapPlugin extends Plugin {\n  async onload() {\n    // Minimal logic change (Option B): sanitize class tokens with whitespace\n    // to avoid InvalidCharacterError when other plugins add class names with spaces.\n    try {\n      const g: any = window as any;\n      if (!g.__jsmindMindmapPatchedClassListAdd) {\n        const proto: any = (DOMTokenList as any).prototype;\n        const originalAdd = proto.add;\n        proto.add = function (...tokens: any[]) {\n          const sanitized = tokens.map((token: any) =>\n            typeof token === 'string' ? token.replace(/\\s+/g, '-') : token\n          );\n          return originalAdd.apply(this, sanitized);\n        };\n        g.__jsmindMindmapPatchedClassListAdd = true;\n      }\n    } catch (e) {\n      // noop\n    }\n\n    this.registerView(\n      VIEW_TYPE_MINDMAP,\n      (leaf) => new MindmapView(leaf, this)\n    );\n\n    this.addCommand({\n      id: 'open-jsmind-preview',\n      name: 'Preview current markdown as mindmap',\n      callback: async () => {\n        const file = this.app.workspace.getActiveFile();\n        if (!file) {\n          new Notice('No active file');\n          return;\n        }\n        const leaf = this.app.workspace.getRightLeaf(false);\n        await leaf.setViewState({ type: VIEW_TYPE_MINDMAP, active: true });\n        const view = leaf.view as MindmapView;\n        await view.setFile(file);\n        this.app.workspace.revealLeaf(leaf);\n      },\n    });\n\n    // Resize handling\n    this.registerDomEvent(window, 'resize', () => {\n      const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_MINDMAP);\n      for (const leaf of leaves) {\n        const view = leaf.view as MindmapView;\n        (view as any).jm && (view as any).jm.resize && (view as any).jm.resize();\n      }\n    });\n  }\n\n  onunload() {\n    this.app.workspace.getLeavesOfType(VIEW_TYPE_MINDMAP).forEach(leaf => leaf.detach());\n  }\n}\n\n\n"],
  "mappings": "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",
  "names": []
}
